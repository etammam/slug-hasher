using System;
using System.Collections.Specialized;
using System.Text;
using Slug.Hasher.Utility;
using Slug.Hasher.Utility.Interfaces;

namespace Slug.Hasher.QueryString
{
    /// <summary>
    ///     ''' Provides a secure means for transferring data within a query string.
    ///     '''
    /// </summary>
    public class SecureQueryString : NameValueCollection
    {
        private readonly IEncryptionUtility _mEncryptionUtil;
        private DateTime _mExpireTime = DateTime.MaxValue;
        private readonly string dateFormat = "G";
        private readonly string timeStampKey = "__TS__";

        /// <summary>
        ///     ''' Creates an instance with a specified key.
        ///     '''
        /// </summary>
        /// '''
        /// <param name="key">The key used for cryptographic functions, required 16 chars in length.</param>
        public SecureQueryString(string key)
        {
            _mEncryptionUtil = new EncryptionUtility(key);
        }

        /// <summary>
        ///     ''' Creates an instance with a specified key and an encrypted query string.
        ///     '''
        /// </summary>
        /// '''
        /// <param name="key">The key used for cryptographic functions, required 16 chars in length.</param>
        /// '''
        /// <param name="queryString">An encrypted query string generated by a <see cref="SecureQueryString" /> instance.</param>
        public SecureQueryString(string key, string queryString) : this(key)
        {
            Deserialize(DecryptAndVerify(queryString));
            CheckExpiration();
        }

        /// <summary>
        ///     ''' Gets or sets the timestamp in which this string should expire
        ///     '''
        /// </summary>
        public DateTime ExpireTime
        {
            get => _mExpireTime;
            set => _mExpireTime = value;
        }

        /// <summary>
        ///     ''' Returns an encrypted query string.
        ///     '''
        /// </summary>
        /// '''
        /// <returns></returns>
        public override string ToString()
        {
            return EncryptAndSign(Serialize());
        }

        private void Deserialize(string queryString)
        {
            var nameValuePairs = queryString.Split('&');
            for (var i = 0; i <= nameValuePairs.Length - 1; i++)
            {
                var nameValue = nameValuePairs[i].Split('=');
                if (nameValue.Length == 2)
                    base.Add(nameValue[0], nameValue[1]);
            }

            if (base.GetValues(timeStampKey) != null)
            {
                var strExpireTime = base.GetValues(timeStampKey);
                _mExpireTime = Convert.ToDateTime(strExpireTime?[0]);
            }
        }

        private string Serialize()
        {
            var sb = new StringBuilder();
            foreach (var key in base.AllKeys)
            {
                sb.Append(key);
                sb.Append('=');
                sb.Append(base.GetValues(key)?[0]);
                sb.Append('&');
            }

            sb.Append(timeStampKey);
            sb.Append('=');
            sb.Append(_mExpireTime.ToString(dateFormat));

            return sb.ToString();
        }

        private string DecryptAndVerify(string input)
        {
            return _mEncryptionUtil.Decrypt(input);
        }

        private string EncryptAndSign(string input)
        {
            return _mEncryptionUtil.Encrypt(input);
        }

        private void CheckExpiration()
        {
            if (DateTime.Compare(_mExpireTime, DateTime.Now) < 0)
                throw ExpiredQueryStringException.CreateInstance();
        }
    }
}